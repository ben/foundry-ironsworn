diff --git a/node_modules/@types/chroma-js/index.d.ts b/node_modules/@types/chroma-js/index.d.ts
index c90bb01..82b9120 100755
--- a/node_modules/@types/chroma-js/index.d.ts
+++ b/node_modules/@types/chroma-js/index.d.ts
@@ -7,22 +7,60 @@
  * Chroma.js is a tiny library for all kinds of color conversions and color scales.
  */
 declare namespace chroma {
-    interface ColorSpaces {
-        rgb: [number, number, number];
-        rgba: [number, number, number, number];
-        hsl: [number, number, number];
-        hsv: [number, number, number];
-        hsi: [number, number, number];
-        lab: [number, number, number];
-        lch: [number, number, number];
-        hcl: [number, number, number];
-        cmyk: [number, number, number, number];
-        gl: [number, number, number, number];
+  interface ColorSpacesRecord extends Record<
+    keyof ColorSpaces, Record<string, number>
+    > {
+        rgb: {r: number,g:number, b:number};
+        rgba: {r: number,g:number, b:number, a:number};
+        hsl: {h:number, s: number, l: number, a?: number};
+        hsv: {h:number, s: number, v: number, a?: number};
+        hsi: {h:number, s: number, i: number, a?: number};
+        lab: {l:number, a: number, b: number, a?: number};
+        oklab: {l:number, a: number, b: number, a?: number};
+        lch: {l:number, c: number, h: number, a?: number};
+        hcl: {h:number, c: number, l: number, a?: number};
+        oklch: {l:number, c: number, h: number};
+        cmyk: {c:number, m: number, y: number, k:number};
+        gl: {r: number,g:number,b:number, a?:number};
+    }
+    interface ColorSpaces extends Record<
+      keyof ColorSpaces, ([number, number, number]|[number, number, number, number])
+    > {
+        rgb: [number, number, number]
+        rgba: [number, number, number, number]
+        hsl: [number, number, number]
+        hsv: [number, number, number]
+        hsi: [number, number, number]
+        lab: [number, number, number]
+        oklab: [number, number, number]
+        lch: [number, number, number]
+        hcl: [number, number, number]
+        oklch: [number, number, number]
+        cmyk: [number, number, number, number]
+        gl: [number, number, number, number]
     }
 
-    type InterpolationMode = 'rgb' | 'hsl' | 'hsv' | 'hsi' | 'lab' | 'lch' | 'hcl' | 'lrgb';
+    type InterpolationMode = 'rgb' | 'hsl' | 'hsv' | 'hsi' | 'lab' | 'lch' | 'hcl' | 'lrgb' | 'oklab' | 'oklch';
 
     interface ChromaStatic {
+        /**
+         * Create a color in the specified color space using values.
+         *
+         * @param values An object with attributes corresponding to a color space
+         * @param colorSpace The color space to use. Defaults to "rgb".
+         * @return the color object.
+         */
+        <T extends keyof ColorSpaces>(values: ColorSpacesRecord<T>, colorSpace?: T): Color;
+
+        /**
+         * Create a color in the specified color space using values.
+         *
+         * @param values An array of values (e.g. [r, g, b, a?]).
+         * @param colorSpace The color space to use. Defaults to "rgb".
+         * @return the color object.
+         */
+        <T extends keyof ColorSpaces>(values: ColorSpaces<T>, colorSpace?: T): Color;
+
         /**
          * Creates a color from a string representation (as supported in CSS).
          * Creates a color from a number representation [0; 16777215]
@@ -42,15 +80,6 @@ declare namespace chroma {
 
         (a: number, b: number, c: number, d: number, colorSpace?: keyof ColorSpaces): Color;
 
-        /**
-         * Create a color in the specified color space using values.
-         *
-         * @param values An array of values (e.g. [r, g, b, a?]).
-         * @param colorSpace The color space to use. Defaults to "rgb".
-         * @return the color object.
-         */
-        (values: number[], colorSpace?: keyof ColorSpaces): Color;
-
         /**
          * Create a color from a hex or string representation (as supported in CSS).
          *
@@ -64,24 +93,40 @@ declare namespace chroma {
         valid(color: any, mode?: string): boolean;
 
         hsl(h: number, s: number, l: number): Color;
+        hsl(options: ColorSpacesRecord['hsl']): Color;
 
         hsv(h: number, s: number, v: number): Color;
+        hsv(options: ColorSpacesRecord['hsv']): Color;
 
         lab(lightness: number, a: number, b: number, alpha?: number): Color;
+        lab(options: ColorSpacesRecord['lab']): Color;
+
+        /**
+         * @see {@link https://bottosson.github.io/posts/oklab/}
+         */
+        oklab(lightness: number, a: number, b: number, alpha?: number): Color;
+        oklab(options: ColorSpacesRecord['oklab']): Color;
 
         lch(l: number, c: number, h: number): Color;
+        lch(options: ColorSpacesRecord['lch']): Color;
 
         /**
          * Same meaning as lch(), but in different order.
          */
         hcl(h: number, c: number, l: number): Color;
+        hcl(options: ColorSpacesRecord['hcl']): Color;
+
+        oklch(l: number, c: number, h: number): Color;
+        oklch(options: ColorSpacesRecord['oklch']): Color;
 
         rgb(r: number, g: number, b: number): Color;
+        rgb(options: ColorSpacesRecord['rgb']): Color;
 
         /**
          * GL is a variant of RGB(A), with the only difference that the components are normalized to the range of 0..1.
          */
         gl(red: number, green: number, blue: number, alpha?: number): Color;
+        gl(options: ColorSpacesRecord['gl']): Color;
 
         /**
          * Returns a color from the color temperature scale.
@@ -380,6 +425,16 @@ declare namespace chroma {
          */
         lab: () => ColorSpaces['lab'];
 
+        /**
+         * Returns an array with the **L**, **a**, and **b** components.
+         *
+         * @see {@link https://bottosson.github.io/posts/oklab/}
+         *
+         * @example
+         * chroma('orange').oklab() === [0.79,0.06,0.16]
+         */
+        oklab: () => ColorSpaces['oklab'];
+
         /**
          * Returns an array with the **Lightness**, **chroma**, and **hue**
          * components.
@@ -389,6 +444,7 @@ declare namespace chroma {
          */
         lch: () => ColorSpaces['lch'];
 
+
         /**
          * Alias of [lch](#color-lch), but with the components in reverse
          * order.
@@ -398,6 +454,15 @@ declare namespace chroma {
          */
         hcl: () => ColorSpaces['hcl'];
 
+        /**
+         * Returns an array with the **Lightness**, **chroma**, and **hue**
+         * components.
+         *
+         * @example
+         * chroma('skyblue').lch() === [0.81,0.08,225.75]
+         */
+        oklch: () => ColorSpaces['oklch'];
+
         /**
          * Just like color.rgb but adds the alpha channel to the returned
          * array.
