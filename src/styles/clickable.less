@import 'mixins.less';
@import 'mixins-text.less';

.prosemirror button,
.tox .tox-tbtn--bespoke {
  .clickableBlockMixin();
}

#controls ol.control-tools > li {
  .clickableBlockMixin();
  .borderFloatingMixin();
  .active,
  &:hover {
    .borderGlowExteriorMixin();
  }
}

.tabBaseMixin(@glowSpread: 5px, @glowBlur: 1px,@borderWidth: var(--ironsworn-border-width-md)) {
  border-width: @borderWidth;
  &:hover {
    .borderGlowInteriorMixin(@glowSpread, @glowBlur, var(--ironsworn-color-clickable-block-bg-selected));
    border-color: var(--ironsworn-color-fg-muted);
  }
  &[aria-selected='true'],
  &.active {
    .borderGlowInteriorMixin(@glowSpread, @glowBlur, var(--color-shadow-primary));
    border-color: var(--color-border-highlight-alt);
  }
}

.tabTopMixin(@borderRadius:var(--ironsworn-border-radius-lg)) {
  .tabBaseMixin();
  border-top-right-radius: @borderRadius;
  border-top-left-radius: @borderRadius;
  border-bottom-width: 0px;
}
.tabBottomMixin(@borderRadius:var(--ironsworn-border-radius-lg)) {
  .tabBaseMixin();
  border-bottom-right-radius: @borderRadius;
  border-bottom-left-radius: @borderRadius;
  border-top-width: 0px;
}
.tabLeftMixin(@borderRadius:var(--ironsworn-border-radius-lg)) {
  .tabBaseMixin();
  border-top-left-radius: @borderRadius;
  border-bottom-left-radius: @borderRadius;
  border-right-width: 0px;
}
.tabRightMixin(@borderRadius:var(--ironsworn-border-radius-lg)) {
  .tabBaseMixin();
  border-top-right-radius: @borderRadius;
  border-bottom-right-radius: @borderRadius;
  border-left-width: 0px;
}

.app:not(.ironsworn) button,
.dialog .dialog-buttons button {
  .clickableBlockMixin();
  border-radius: var(--ironsworn-border-radius-md);
  border-width: var(--ironsworn-border-width-md);
  border-style: solid;
}

.dialog .dialog-buttons {
  height: max-content;
  button {
    display: flex;
    align-items: center;
    justify-content: center;
    .button-text {
      flex-grow: 0;
      .initialCapsMixin();
      width: max-content;
      height: max-content;
    }
  }
}

.borderMixin(@color:var(--ironsworn-color-border),@width:var(--ironsworn-border-width-md)) {
  color: @color;
  border-style: solid;
  border-width: @width;
}

form,
#permissions-config {
  .notes,
  .hint {
    color: var(--ironsworn-color-fg-muted);
  }
}
.ironsworn button {
  margin: 0;
}

.entity-link,
.content-link {
  transition: var(--std-animation);
  background-color: var(--ironsworn-color-clickable-block-bg);
  border-color: var(--ironsworn-color-clickable-block-border);
  .clickableTextMixin();

  i {
    transition: var(--std-animation);
    color: var(--ironsworn-color-clickable-text);
  }
  &:hover {
    text-shadow: none;
    background-color: var(--ironsworn-color-clickable-block-bg-hover);
    border-color: var(--ironsworn-color-clickable-block-border-hover);
    i {
      color: var(--ironsworn-color-clickable-text-hover);
      text-shadow: none;
    }
  }
}

// CLICKABLE MIXINS

.interactiveMixin {
  transition: var(--std-animation);
  cursor: pointer;
  &.disabled, // FIXME: ditch this class, its redundant with more semantic options
    &:disabled,
    &[aria-disabled="true"] {
    color: inherit;
    cursor: not-allowed;
    pointer-events: none;
    opacity: 0.35;
  }
}

.clickableTextMixin {
  .interactiveMixin();
  background: transparent;
  color: var(--ironsworn-color-clickable-text);
  &[aria-selected='true'],
  &.selected,
  &.active {
    .textActiveMixin();
  }
  &:hover,
  &.hover {
    .textHoverMixin();
  }
  &:focus,
  &:focus-within {
    .textFocusMixin();
  }
}

.textHoverMixin {
  color: var(--ironsworn-color-clickable-text-hover);
}
.textFocusMixin {
  background-color: var(--ironsworn-color-fg-overlay-weak);
}

.textActiveMixin {
  color: var(--ironsworn-color-clickable-text-selected);
}

.blockHoverMixin(@blockSize:20px) {
  outline: none;
  color: var(--ironsworn-color-clickable-block-fg-hover);
  background-color: var(--ironsworn-color-bg);
  border-color: var(--ironsworn-color-clickable-block-border-hover);
  .textStrokeMixin();
  .overlayGlowMixin(@blockSize);
  z-index: var(--ironsworn-z-index-high);
}

.blockFocusMixin {
  outline: none;
  .textStrokeMixin();
  .borderGlowExteriorMixin();
  z-index: var(--ironsworn-z-index-high);
}

.blockActiveMixin {
  box-shadow: none;
  outline: none;
  color: var(--ironsworn-color-clickable-block-fg-selected);
  background-color: var(--ironsworn-color-clickable-block-bg-selected);
  border-color: var(--ironsworn-color-clickable-block-border-selected);
  z-index: var(--ironsworn-z-index-high);
}
// For the block's 'default' state.
.blockMixin(@borderWidth:0px,@blockSize:20px,@borderRadius:0px) {
  .interactiveMixin();
  outline: none;
  box-shadow: none;
  overflow-y: visible;
  border-width: @borderWidth;
  border-color: var(--ironsworn-color-clickable-block-border);
  border-style: solid;
  border-radius: @borderRadius;
  color: var(--ironsworn-color-clickable-block-fg);
  background-color: var(--ironsworn-color-clickable-block-bg);
}

.iconButtonBaseMixin {
  display: flex;
  align-items: center;
  flex-flow: row nowrap;
  align-content: center;
  text-align: center;
  justify-content: center;
  padding: var(--ironsworn-spacer-xs);
  &:not(:empty) {
    gap: var(--ironsworn-spacer-xs);
  }
  &:empty {
    // restricts width + removes border if there's no text
    border: none !important;
    flex-grow: 0;
    line-height: 1;
    height: max-content;
    width: max-content;
  }
  &:before {
    line-height: 1;
    height: 1em;
    width: 1em;
  }
  // override to compensate for chrome user agent stylesheet bug: https://bugs.chromium.org/p/chromium/issues/detail?id=681917
  .button-text {
    // makes this seamless with existing buttons that don't need this styling
    display: inline;
    strong {
      white-space: nowrap;
    }
  }
  &.vertical {
    writing-mode: initial !important; // prevents this fix from breaking the button layout in FF
    flex-direction: column;
    .button-text {
      line-height: inherit;
      display: inherit;
      // writing-mode: vertical-lr !important;
      writing-mode: inherit;
    }
  }
}

.icon-button {
  .iconButtonBaseMixin();
}

.clickableBlockMixin(@borderWidth:0px,@blockSize:20px,@borderRadius:0px) {
  .blockMixin(@borderWidth,@blockSize,@borderRadius);
  &:hover,
  &.hover {
    .blockHoverMixin(@blockSize);
  }
  &:focus,
  &:focus-within {
    .blockFocusMixin();
  }
  &[aria-selected='true'],
  &.selected,
  &.active {
    .blockActiveMixin();
  }
}

.clickable {
  border: none;
  box-sizing: border-box;
  background: none;
  outline: none;
  box-shadow: none;
  .interactiveMixin();

  &:not(svg):not(.svg) {
    &.text {
      justify-content: flex-start;
      .clickableTextMixin();
    }
    &.block {
      .clickableBlockMixin(var(--ironsworn-border-width-md), var(--ironsworn-vertical-slider-width));
    }
  }
  svg,
  &.svg {
    &.selected,
    &[aria-selected='true'] {
      fill-opacity: 1;
    }
    &.hover,
    &:hover {
      fill-opacity: 0.35;
    }
    &:active {
      fill-opacity: 0.5;
    }
  }
}
