@use 'mixin:text.scss';

// for classes that apply a set of commonly used styles, but don't describe an element with a specific purpose

.grid {
	display: grid;
}

.scrollable {
	// property intentionally duplicated to provide fallback
	overflow-y: scroll;
	overflow-y: overlay;
}

.initial-caps {
	@include text.initialCaps;
}

.vertical-text {
	border: none;
	writing-mode: vertical-lr;
	width: var(--font-size-24);

	i {
		display: inline-block;
		transform: rotate(90deg);
	}
}

.inset {
	margin: var(--ironsworn-spacer-md);
	border: var(--ironsworn-border-width-md) solid
		var(--ironsworn-color-border-muted);
	border-radius: var(--ironsworn-border-radius-md);
	padding: var(--ironsworn-spacer-md);
}

.stack {
	flex-grow: 0;

	.stack-row {
		position: relative;

		// FIXME refactor as component and encapsulate the relevant css there
		flex: 0 0 auto;
		z-index: auto;
		border: var(--ironsworn-border-width-md) solid var(--ironsworn-color-border);
		border-top: none;
		padding: 0;
		min-width: var(--ironsworn-vertical-slider-width);
		text-align: center;
		line-height: var(--ironsworn-line-height-lg);

		&:hover,
		&.hover,
		&.selected,
		&[aria-selected='true'] {
			z-index: var(
				--ironsworn-z-index-high
			); // with position: relative, ensures that hovered item borders/filters aren't rendered behind other items
		}

		&:first-child {
			border-top-left-radius: var(--ironsworn-border-radius-lg);
			border-top-right-radius: var(--ironsworn-border-radius-lg);
		}

		&:last-child {
			border-bottom-left-radius: var(--ironsworn-border-radius-lg);
			border-bottom-right-radius: var(--ironsworn-border-radius-lg);
		}

		input[type='radio'] {
			appearance: none;
		}
	}
}

.nogrow {
	flex-grow: 0 !important;
}

.strikethru * {
	text-decoration: line-through;
}
