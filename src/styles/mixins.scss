// typography mixins

// until this chromium issue with paint-order is resolved, text-stroke is functionally useless: https://bugs.chromium.org/p/chromium/issues/detail?id=815111
// yes, i am bitter, because even safari has supported it for ~4 years at this point :)
// in the mean time, we can fake a 1px solid outside stroke by stacking text-shadow or drop-shadow filters. be cautious with overusing it; they're not blurred, so the computational cost isn't *too* bad, but that's still 6x as many shadows as we want to be drawing.
// if you want this + a soft shadow, LESS can combine them with square bracket notation to access the text-shadow property.
// generated with owumaro.github.io/text-stroke-generator/
// TODO: rewrite this as a function
@mixin text-stroke($color: var(--ironsworn-color-text-stroke)) {
  text-shadow: 1px 0 0 $color, 0.540302px 0.841471px 0 $color,
    -0.416147px 0.909297px 0 $color, -0.989993px 0.14112px 0 $color,
    -0.653644px -0.756803px 0 $color, 0.283662px -0.958924px 0 $color,
    0.96017px -0.279416px 0 $color;
}

@mixin initial-caps() {
  &::first-letter {
    text-transform: uppercase;
  }
}

@mixin thematic-color($color) {
  --ironsworn-color-text-stroke: var(--ironsworn-color-dark);
  --ironsworn-color-thematic: #{$color};
}

// special effects

// used to mark focused fields
@mixin border-glow-exterior($spread: 6px) {
  box-shadow: 0 0 $spread var(--ironsworn-color-cool);
}

// used inside block/tab like elements. it's inset so that both the focus effect and the hover effect can be visible at once.
@mixin border-glow-interior(
  $spread: 5px,
  $blur: 0,
  $color: var(--ironsworn-color-cool)
) {
  box-shadow: inset 0 0 $spread $blur $color;
}

// sets border colours, modelled after the hover effect on FVTT's canvas buttons.
@mixin border-accent-color(
  $warm: var(--ironsworn-color-warm),
  $cool: var(--ironsworn-color-cool)
) {
  border-color: $warm;
  border-bottom-color: $cool;
}

@mixin text-glow($color: var(--ironsworn-color-fg-highlight), $spread: 10px) {
  text-shadow: 0 0 $spread $color;
}

// used for e.g. hover effects. resembles a transparent overlay (with a subtle gradient) without having to do any interpolation or set additional variables.
@mixin overlay-glow($blockSize: 50px) {
  @include border-glow-interior(
    calc($blockSize / 2),
    0,
    var(
      --ironsworn-color-thematic,
      var(--ironsworn-color-clickable-block-bg-hover)
    )
  );
}

@mixin border-floating() {
  border-style: outset;
  border-color: var(--ironsworn-color-border);
}

@mixin tab-base(
  $glowSpread: 5px,
  $glowBlur: 1px,
  $borderWidth: var(--ironsworn-border-width-md)
) {
  border-width: $borderWidth;

  &:hover {
    @include border-glow-interior(
      $glowSpread,
      $glowBlur,
      var(--ironsworn-color-clickable-block-bg-selected)
    );

    border-color: var(--ironsworn-color-fg-muted);
  }

  &[aria-selected='true'],
  &.active {
    @include border-glow-interior(
      $glowSpread,
      $glowBlur,
      var(--ironsworn-color-cool)
    );

    border-color: var(--ironsworn-color-warm);
  }
}

@mixin tab-top($borderRadius: var(--ironsworn-border-radius-lg)) {
  @include tab-base;

  border-bottom-width: 0;
  border-top-left-radius: $borderRadius;
  border-top-right-radius: $borderRadius;
}
@mixin tab-bottom($borderRadius: var(--ironsworn-border-radius-lg)) {
  @include tab-base;

  border-top-width: 0;
  border-bottom-left-radius: $borderRadius;
  border-bottom-right-radius: $borderRadius;
}
@mixin tab-left($borderRadius: var(--ironsworn-border-radius-lg)) {
  @include tab-base;

  border-right-width: 0;
  border-top-left-radius: $borderRadius;
  border-bottom-left-radius: $borderRadius;
}
@mixin tab-right($borderRadius: var(--ironsworn-border-radius-lg)) {
  @include tab-base;

  border-left-width: 0;
  border-top-right-radius: $borderRadius;
  border-bottom-right-radius: $borderRadius;
}

@mixin border(
  $color: var(--ironsworn-color-border),
  $width: var(--ironsworn-border-width-md)
) {
  border-width: $width;
  border-style: solid;
  color: $color;
}

// CLICKABLE MIXINS

@mixin interactive() {
  transition: var(--ironsworn-transition);

  &.disabled,
  &:disabled,
  &[aria-disabled='true'] {
    opacity: 0.35;
    cursor: not-allowed;
    color: inherit;
    pointer-events: none;
  }
}

@mixin text-hover() {
  color: var(--ironsworn-color-clickable-text-hover);
  filter: var(--ironsworn-filter-highlight);
}
@mixin text-focus() {
  @include focus-outline;
}

@mixin text-active() {
  color: var(--ironsworn-color-clickable-text-selected);
  filter: var(--ironsworn-filter-highlight);
}

@mixin clickable-text() {
  --ironsworn-color-text-stroke: transparent;
  @include interactive;

  transition-duration: var(--ironsworn-transition-duration);
  transition-property: color, filter, text-shadow, text-stroke;
  transition-timing-function: var(--ironsworn-transition-timing-function);
  margin: 0;
  border-width: 0;
  box-shadow: none !important;

  // @include text-stroke();
  background: transparent;
  color: var(--ironsworn-color-clickable-text);

  &:hover,
  &.hover {
    --ironsworn-color-text-stroke: var(--ironsworn-color-warm-50);
    @include text-hover;
  }

  &:focus,
  &:focus-within {
    --ironsworn-color-text-stroke: var(--ironsworn-color-warm-50);
    @include text-focus;
  }

  // we can't do much about the paint order here, but that's fine -- the overlap of a transparent color creates a nice effect here.
  &[aria-selected='true'],
  &.selected,
  &.active {
    --ironsworn-color-text-stroke: var(--ironsworn-color-warm-50);
    @include text-active;
  }
}

@mixin block-hover($blockSize: 50px) {
  z-index: var(--ironsworn-z-index-higher);
  border-color: var(--ironsworn-color-clickable-block-border-hover);
  background-color: var(--ironsworn-color-clickable-block-bg-hover);
  color: var(--ironsworn-color-clickable-block-fg-hover);
}

@mixin block-focus() {
  @include focus-outline;

  z-index: var(--ironsworn-z-index-highest);
}

@mixin block-active() {
  z-index: var(--ironsworn-z-index-high);
  outline: none;
  border-color: var(--ironsworn-color-clickable-block-border-selected);
  background-color: var(
    --ironsworn-color-thematic,
    var(--ironsworn-color-clickable-block-bg-selected)
  );
  color: var(--ironsworn-color-clickable-block-fg-selected);
}

// For the block's 'default' state.
@mixin block($blockSize: 50px) {
  @include interactive;

  border-style: solid;
  border-color: var(--ironsworn-color-clickable-block-border);
  box-shadow: none;
  background-color: var(--ironsworn-color-clickable-block-bg);
  overflow-y: visible;
  color: var(--ironsworn-color-clickable-block-fg);

  &.vertical-text {
    flex-direction: column;
    writing-mode: initial !important; // prevents this fix from breaking the button layout in FF

    & > * {
      writing-mode: vertical-lr !important;
    }
  }
}

@mixin icon-button-base() {
  display: flex;
  flex-flow: row nowrap;
  align-content: center;
  align-items: center;
  justify-content: center;
  padding: var(--ironsworn-spacer-xs);
  text-align: center;

  &::before {
    width: 1em;
    height: 1em;
    line-height: 1;
  }

  &:not(:empty) {
    gap: var(--ironsworn-spacer-xs);
  }

  &:empty {
    flex-grow: 0;

    // restricts width + removes border if there's no text
    border: none !important;
    width: max-content;
    height: max-content;
    line-height: 1;
  }

  // override to compensate for chrome user agent stylesheet bug: https://bugs.chromium.org/p/chromium/issues/detail?id=681917
  .button-text {
    // makes this seamless with existing buttons that don't need this styling
    display: inline;

    strong {
      white-space: nowrap;
    }
  }

  &.vertical-text {
    flex-direction: column;
    writing-mode: initial !important; // prevents this fix from breaking the button layout in FF

    .button-text {
      display: inherit;
      line-height: inherit;
      writing-mode: inherit;
    }
  }
}

@mixin clickable-block($blockSize: 50px) {
  @include block($blockSize);

  &:hover,
  &.hover {
    @include block-hover($blockSize);
  }

  &:focus,
  &:focus-within {
    @include block-focus;
  }

  &[aria-selected='true'],
  &.selected,
  &.active {
    @include block-active;
  }
}

// input mixins

@mixin input-field-focus($spread: 6px) {
  @include border-glow-exterior($spread);
  @include border-accent-color(
    var(--ironsworn-color-warm-50),
    var(--ironsworn-color-cool-50)
  );

  outline: var(--ironsworn-border-width-md) solid var(--ironsworn-color-warm);
}

@mixin input-field-static() {
  border-width: var(--ironsworn-border-width-md);
  border-style: var(--ironsworn-input-border-style);
  border-radius: var(--ironsworn-border-radius-md);
  border-color: var(--ironsworn-color-input-border);
  background: var(--ironsworn-color-input-bg);
  color: var(--ironsworn-color-fg);
}

@mixin input-field($spread: 6px) {
  @include interactive;
  @include input-field-static;

  // specify invisible outline to stop jitter from border width transition
  outline-width: var(--ironsworn-border-width-md);
  outline-style: solid;
  outline-color: transparent;
  cursor: initial;

  &::placeholder {
    opacity: 0.5;
    color: var(--ironsworn-color-fg);
  }

  &:hover {
    @include border-glow-interior($spread, 0, var(--ironsworn-color-cool));

    border-color: var(--ironsworn-color-clickable-block-border-hover);
  }

  &:focus,
  &:focus-within {
    @include input-field-focus;
    @include border-accent-color(
      var(--ironsworn-color-warm-80),
      var(--ironsworn-color-cool-80)
    );

    &:hover {
      // box-shadow: @include input-field-focus(); [box-shadow],
      //   @include border-glow-interior($spread, 0, var(--ironsworn-color-cool));
      //     [box-shadow];
    }
  }
}

@mixin margin($direction) {
  $spacer: var(--ironsworn-spacer-md);

  position: relative;
  flex: 0;
  border-#{$direction}-style: solid;
  border-#{$direction}-width: var(--ironsworn-border-width-md);
  margin-#{$direction}: $spacer;
  border-#{$direction}-color: var(--ironsworn-color-border);
}

@mixin focus-outline() {
  // outline disabled for now
  // outline: 1px solid var(--ironsworn-color-cool) !important;
  z-index: var(--ironsworn-z-index-highest);
}

// used on draggables, highlighted table rows in chat. set opacity in increments of 10 (because otherwise the CSS variable won't exist).
// since gradients are *images*, they're overlaid on top of background-colour. great for a lazy tint on a highlighted element.
// we *could* just make it a single-color 'gradient', but i think the subtle colour movement is kinda fun. :)
// only problem is they're not currently animatable... at least, not without getting some sorcery w/ pseudo-elements involved.
@mixin static-highlight($opacity: 20, $direction: to bottom) {
  background-image: linear-gradient(
    $direction,
    var(--ironsworn-color-warm-#{$opacity}),
    var(--ironsworn-color-cool-#{$opacity})
  );
  background-blend-mode: overlay;
}

@mixin overlay($z-index: var(--ironsworn-z-index-highest)) {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: $z-index;
  content: '';
  pointer-events: none;
}

@mixin tint($background, $opacity: 0.5) {
  opacity: $opacity;
  background: $background;
}

@mixin text-compact() {
  ol,
  ul {
    padding: 0 0 0 1em;

    li {
      margin: 0.2em 0;

      &:last-child {
        margin-bottom: 0;
      }

      &:first-child {
        margin-top: 0;
      }
    }
  }

  ul {
    list-style-type: disc;

    ul {
      list-style-type: circle;

      ul {
        list-style-type: square;
      }
    }
  }
}
