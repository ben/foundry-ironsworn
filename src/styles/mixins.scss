// typography mixins

// until this chromium issue with paint-order is resolved, text-stroke is functionally useless: https://bugs.chromium.org/p/chromium/issues/detail?id=815111
// yes, i am bitter, because even safari has supported it for ~4 years at this point :)
// in the mean time, we can fake a 1px solid outside stroke by stacking text-shadow or drop-shadow filters. be cautious with overusing it; they're not blurred, so the computational cost isn't *too* bad, but that's still 6x as many shadows as we want to be drawing.
// if you want this + a soft shadow, LESS can combine them with square bracket notation to access the text-shadow property.
// generated with owumaro.github.io/text-stroke-generator/
@mixin text-stroke($color: var(--ironsworn-color-text-stroke)){
  text-shadow: 1px 0px 0px $color, 0.540302px 0.841471px 0px $color,
    -0.416147px 0.909297px 0px $color, -0.989993px 0.14112px 0px $color,
    -0.653644px -0.756803px 0px $color, 0.283662px -0.958924px 0px $color,
    0.96017px -0.279416px 0px $color;
}
@mixin initial-caps() {
  &::first-letter {
    text-transform: uppercase;
  }
}

// special effects

// used to mark focused fields
@mixin border-glow-exterior($spread:6px){
  box-shadow: 0 0 $spread var(--ironsworn-color-cool);
}

// used inside block/tab like elements. it's inset so that both the focus effect and the hover effect can be visible at once.
@mixin border-glow-interior($spread:5px,$blur:0,$color:var(--ironsworn-color-cool)){
  box-shadow: inset 0 0 $spread $blur $color;
}

// sets border colours, modelled after the hover effect on FVTT's canvas buttons.
@mixin border-accent-color($warm:var(--ironsworn-color-warm),$cool:var(--ironsworn-color-cool)){
  border-color: $warm;
  border-bottom-color: $cool;
}

@mixin text-glow($color:var(--ironsworn-color-fg-highlight),$spread:10px){
  text-shadow: 0 0 $spread $color;
}

// used for e.g. hover effects. resembles a transparent overlay (with a subtle gradient) without having to do any interpolation or set additional variables.
@mixin overlay-glow($blockSize:50px){
  @include border-glow-interior(calc($blockSize / 2),0,var(--ironsworn-color-thematic,var(--ironsworn-color-clickable-block-bg-hover)));
}

@mixin border-floating() {
  border-style: outset;
  border-color: var(--ironsworn-color-border);
}

@mixin tab-base($glowSpread: 5px, $glowBlur: 1px,$borderWidth: var(--ironsworn-border-width-md)){
  border-width: $borderWidth;
  &:hover {
    @include border-glow-interior($glowSpread, $glowBlur, var(--ironsworn-color-clickable-block-bg-selected));
    border-color: var(--ironsworn-color-fg-muted);
  }
  &[aria-selected='true'],
  &.active {
    @include border-glow-interior($glowSpread, $glowBlur, var(--ironsworn-color-cool));
    border-color: var(--ironsworn-color-warm);
  }
}

@mixin tab-top($borderRadius:var(--ironsworn-border-radius-lg)){
  @include tab-base();
  border-top-right-radius: $borderRadius;
  border-top-left-radius: $borderRadius;
  border-bottom-width: 0px;
}
@mixin tab-bottom($borderRadius:var(--ironsworn-border-radius-lg)){
  @include tab-base();
  border-bottom-right-radius: $borderRadius;
  border-bottom-left-radius: $borderRadius;
  border-top-width: 0px;
}
@mixin tab-left($borderRadius:var(--ironsworn-border-radius-lg)){
  @include tab-base();
  border-top-left-radius: $borderRadius;
  border-bottom-left-radius: $borderRadius;
  border-right-width: 0px;
}
@mixin tab-right($borderRadius:var(--ironsworn-border-radius-lg)){
  @include tab-base();
  border-top-right-radius: $borderRadius;
  border-bottom-right-radius: $borderRadius;
  border-left-width: 0px;
}

@mixin border($color:var(--ironsworn-color-border),$width:var(--ironsworn-border-width-md)){
  color: $color;
  border-style: solid;
  border-width: $width;
}

// CLICKABLE MIXINS

@mixin interactive() {
  transition: var(--std-animation);
  &.disabled, // FIXME: ditch this class, its redundant with more semantic options
    &:disabled,
    &[aria-disabled="true"] {
    color: inherit;
    cursor: not-allowed;
    pointer-events: none;
    opacity: 0.35;
  }
}

@mixin text-hover() {
  color: var(--ironsworn-color-clickable-text-hover);
  filter: var(--ironsworn-filter-highlight);
}
@mixin text-focus() {
  @include focus-outline();
}

@mixin text-active() {
  color: var(--ironsworn-color-clickable-text-selected);
  filter: var(--ironsworn-filter-highlight);
}

@mixin clickable-text() {
  --ironsworn-color-text-stroke: transparent;
  @include interactive();
  margin: 0;
  // @include text-stroke();
  background: transparent;
  color: var(--ironsworn-color-clickable-text);
  border-width: 0;
  box-shadow: none !important;
  transition-property: color, filter, text-shadow, text-stroke;
  transition-duration: var(--ironsworn-transition-duration);
  transition-timing-function: var(--ironsworn-transition-timing-function);
  // we can't do much about the paint order here, but that's fine -- the overlap of a transparent color creates a nice effect here.
  &[aria-selected='true'],
  &.selected,
  &.active {
    --ironsworn-color-text-stroke: var(--ironsworn-color-warm-50);
    @include text-active();
  }
  &:hover,
  &.hover {
    --ironsworn-color-text-stroke: var(--ironsworn-color-warm-50);
    @include text-hover();
  }
  &:focus,
  &:focus-within {
    --ironsworn-color-text-stroke: var(--ironsworn-color-warm-50);
    @include text-focus();
  }
}

@mixin block-hover($blockSize:50px){
  color: var(--ironsworn-color-clickable-block-fg-hover);
  background-color: var(--ironsworn-color-clickable-block-bg-hover);
  border-color: var(--ironsworn-color-clickable-block-border-hover);
  z-index: var(--ironsworn-z-index-higher);
}

@mixin block-focus() {
  z-index: var(--ironsworn-z-index-highest);
  @include focus-outline();
}

@mixin block-active() {
  outline: none;
  color: var(--ironsworn-color-clickable-block-fg-selected);
  background-color: var(
    --ironsworn-color-thematic,
    var(--ironsworn-color-clickable-block-bg-selected)
  );
  border-color: var(--ironsworn-color-clickable-block-border-selected);
  z-index: var(--ironsworn-z-index-high);
}

// For the block's 'default' state.
@mixin block($blockSize:50px){
  @include interactive();
  box-shadow: none;
  overflow-y: visible;
  border-color: var(--ironsworn-color-clickable-block-border);
  border-style: solid;
  color: var(--ironsworn-color-clickable-block-fg);
  background-color: var(--ironsworn-color-clickable-block-bg);
  &.vertical-text {
    writing-mode: initial !important; // prevents this fix from breaking the button layout in FF
    flex-direction: column;
    & > * {
      writing-mode: vertical-lr !important;
    }
  }
}

@mixin icon-button-base() {
  display: flex;
  align-items: center;
  flex-flow: row nowrap;
  align-content: center;
  text-align: center;
  justify-content: center;
  padding: var(--ironsworn-spacer-xs);
  &:not(:empty) {
    gap: var(--ironsworn-spacer-xs);
  }
  &:empty {
    // restricts width + removes border if there's no text
    border: none !important;
    flex-grow: 0;
    line-height: 1;
    height: max-content;
    width: max-content;
  }
  &:before {
    line-height: 1;
    height: 1em;
    width: 1em;
  }
  // override to compensate for chrome user agent stylesheet bug: https://bugs.chromium.org/p/chromium/issues/detail?id=681917
  .button-text {
    // makes this seamless with existing buttons that don't need this styling
    display: inline;
    strong {
      white-space: nowrap;
    }
  }
  &.vertical-text {
    writing-mode: initial !important; // prevents this fix from breaking the button layout in FF
    flex-direction: column;
    .button-text {
      line-height: inherit;
      display: inherit;
      writing-mode: inherit;
    }
  }
}

@mixin clickable-block($blockSize:50px,){
  @include block($blockSize);
  &:hover,
  &.hover {
    @include block-hover($blockSize);
  }
  &:focus,
  &:focus-within {
    @include block-focus();
  }
  &[aria-selected='true'],
  &.selected,
  &.active {
    @include block-active();
  }
}

// input mixins

@mixin input-field-focus($spread: 6px){
  @include border-glow-exterior($spread);
  @include border-accent-color(var(--ironsworn-color-warm-50), var(--ironsworn-color-cool-50));
  outline: var(--ironsworn-border-width-md) solid var(--ironsworn-color-warm);
}

@mixin input-field-static(){
  color: var(--ironsworn-color-fg);
  background: var(--ironsworn-color-input-bg);
  border-width: var(--ironsworn-border-width-md);
  border-style: var(--ironsworn-input-border-style);
  border-color: var(--ironsworn-color-input-border);
  border-radius: var(--ironsworn-border-radius-md);
}

@mixin input-field($spread:6px){
  // specify invisible outline to stop jitter from border width transition
  outline-width: var(--ironsworn-border-width-md);
  outline-style: solid;
  outline-color: transparent;
  @include interactive();
  @include input-field-static();
  cursor: initial;
  &::placeholder {
    color: var(--ironsworn-color-fg);
    opacity: 0.5;
  }
  &:hover {
    border-color: var(--ironsworn-color-clickable-block-border-hover);
    @include border-glow-interior($spread, 0, var(--ironsworn-color-cool));
  }
  &:focus,
  &:focus-within {
    @include input-field-focus();
    @include border-accent-color(var(--ironsworn-color-warm-80), var(--ironsworn-color-cool-80));
    &:hover {
      box-shadow: @include input-field-focus(); [box-shadow],
        @include border-glow-interior($spread, 0, var(--ironsworn-color-cool));
          [box-shadow];
    }
  }
}

@mixin margin($direction){
  $spacer: var(--ironsworn-spacer-md);
  flex: 0;
  border-#{$direction}-style: solid;
  position: relative;
  border-#{$direction}-width: var(--ironsworn-border-width-md);
  margin-#{$direction}: $spacer;
  border-#{$direction}-color: var(--ironsworn-color-border);
}

@mixin focus-outline(){
  // outline disabled for now
  // outline: 1px solid var(--ironsworn-color-cool) !important;
  z-index: var(--ironsworn-z-index-highest);
}

// used on draggables, highlighted table rows in chat. set opacity in increments of 10 (because otherwise the CSS variable won't exist).
// since gradients are *images*, they're overlaid on top of background-colour. great for a lazy tint on a highlighted element.
// we *could* just make it a single-color 'gradient', but i think the subtle colour movement is kinda fun. :)
// only problem is they're not currently animatable... at least, not without getting some sorcery w/ pseudo-elements involved.
@mixin static-highlight($opacity:20,$direction:'to bottom'){
  background-image: unquote(
    %(
      'linear-gradient(%s, var(--ironsworn-color-warm-%s), var(--ironsworn-color-cool-%s))',
      $direction,
      $opacity,
      $opacity
    )
  );
  background-blend-mode: overlay;
}

@mixin overlay(){
  content: '';
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  pointer-events: none;
  z-index: var(--ironsworn-z-index-highest);
}

@mixin text-compact(){
  ol,
  ul {
    padding: 0 0 0 1em;
    li {
      margin: 0.2em 0;
      &:last-child {
        margin-bottom: 0;
      }
      &:first-child {
        margin-top: 0;
      }
    }
  }
  ul {
    list-style-type: disc;
    ul {
      list-style-type: circle;
      ul {
        list-style-type: square;
      }
    }
  }
}
