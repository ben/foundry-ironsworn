@import 'mixin-utils.less';
@import 'attr-box.less';
@import 'button.less';
@import 'chat-messages.less';
@import 'compact-sheet.less';
@import 'dialogs.less';
@import 'editor.less';
@import 'forms.less';
@import 'icons.less';
@import 'item-list.less';
@import 'layout.less';
@import 'rolls.less';
@import 'sidebar.less';
@import 'tables.less';
@import 'transitions.less';
@import 'typography.less';
@import 'widgets.less';

::-webkit-scrollbar-track {
  box-shadow: 0 0 1px #999 inset;
  border-radius: var(--ironsworn-border-radius-lg);
}
::-webkit-scrollbar-thumb {
  outline: none;
  border-radius: var(--ironsworn-border-radius-md);
  background: #444;
  border: var(--ironsworn-border);
  scrollbar-width: thin;
  scrollbar-color: #444 rgba(0, 0, 0, 0.1);
}
::-webkit-scrollbar-thumb {
  background: var(--ironsworn-color-widget-fill);
  border-color: var(--ironsworn-color-widget-border);
}

:root {
  --transition-general: all 0.5s ease;
  --widget-stroke-width: 1px;

  // VARS BY ATTRIBUTE: IRONSWORN COLOURS
  --ironsworn-color-red-1: #ff4f5e;
  // original sample from PDF: #c9181a
  --ironsworn-color-red-2: #e33722;
  --ironsworn-color-red-3: #8e0006;
  --ironsworn-color-purple-1: #e056e4;
  // original sample from PDF: #8c1d81
  --ironsworn-color-purple-2: #b32fb5;
  --ironsworn-color-purple-3: #6d0075;
  --ironsworn-color-blue-1: #00d1ff;
  // original sample from PDF: #35a9e0
  --ironsworn-color-blue-2: #00a2ef;
  --ironsworn-color-blue-3: #0062e3;
  --ironsworn-background-image: none;

  // VARS BY TARGET: BASIC
  --ironworn-color-fg: black;
  // lightness between 'mid' and fg'
  --ironsworn-color-fg-faded: #888;
  // lightness roughly halfway between 'fg' and 'bg'
  --ironsworn-color-midtone: darkgray;
  // lightness between 'mid' and 'bg'
  --ironsworn-color-bg-faded: #ccc;
  --ironsworn-color-bg: white;
  --ironsworn-color-bg-highlight: palegoldenrod;

  // VARS BY TARGET: BORDERS
  --ironsworn-color-border: var(--ironworn-color-fg);
  --ironsworn-color-border-faded: var(--ironsworn-color-midtone);
  --ironsworn-border-style: solid;
  --ironsworn-border-width: 1px;
  --ironsworn-border-width-thick: 2px;
  --ironsworn-border: var(--ironsworn-border-width)
    var(--ironsworn-border-style) var(--ironsworn-color-border);

  --ironsworn-border-radius-sm: 2px;
  --ironsworn-border-radius-md: 3px;
  --ironsworn-border-radius-lg: 4px;
  --ironsworn-border-radius-xl: 5px;

  // VARS BY TARGET: WIDGETS
  // widget w/o any states like hover or selected
  --ironsworn-color-widget-text-enabled: var(--ironsworn-color-fg);
  --ironsworn-color-widget-fill-enabled: var(--ironsworn-color-bg);
  --ironsworn-color-widget-stroke-enabled: var(--ironsworn-color-fg);
  // inverts FG/BG colours when selected
  --ironsworn-color-widget-text-selected: var(--ironsworn-color-bg);
  --ironsworn-color-widget-fill-selected: var(--ironsworn-color-fg);
  --ironsworn-color-widget-stroke-selected: var(--ironsworn-color-fg);
  // hover can be thought of as a "preview" of select, so this shows the 'ghost' version of the fill
  --ironsworn-color-widget-text-hover: var(--ironsworn-color-fg);
  --ironsworn-color-widget-fill-hover: var(--ironsworn-color-bg-faded);
  --ironsworn-color-widget-stroke-hover: var(--ironsworn-color-bg-faded);

  --ironsworn-color-widget-text-active: var(
    --ironsworn-color-widget-text-enabled
  );
  --ironsworn-color-widget-fill-active: var(
    --ironsworn-color-widget-fill-enabled
  );
  --ironsworn-color-widget-stroke-active: var(
    --ironsworn-color-widget-stroke-enabled
  );

  --ironsworn-color-legacy-quests: var(--ironsworn-color-red-2);
  --ironsworn-color-legacy-bonds: var(--ironsworn-color-purple-2);
  --ironsworn-color-legacy-discoveries: var(--ironsworn-color-blue-2);

  --ironsworn-color-danger: hsl(0, 80%, 40%);
  --ironsworn-color-danger-faded: hsl(0, 80%, 40%);
  --ironsworn-color-warning: hsl(55, 100%, 50%);
  --ironsworn-color-warning-faded: hsl(55, 100%, 50%);
  --ironsworn-color-success: hsl(200, 80%, 40%);
  --ironsworn-color-success-faded: hsl(200, 80%, 40%);
  --ironsworn-dice-background: #afafaf;
}

.ironsworn {
  font-family: var(--font-primary);
  color: var(--ironsworn-color-fg);
  border-color: var(--ironsworn-color-border);

  .window-content {
    background: var(--ironsworn-color-bg);
    background-image: none;
    color: var(--ironsworn-color-fg);
  }

  .app {
    color: var(--ironsworn-color-fg);
  }

  .window-app,
  .journal-entry .journal-entry-content {
    background: initial;
    background-color: var(--ironsworn-color-bg);
    border: var(--ironsworn-border);
  }

  .window-content {
    height: 100%;
    padding: 5px;
    scrollbar-width: thin;
  }
}

hr {
  width: 100%;
  border-color: var(--ironsworn-color-border);
  border-width: 1px 0 0;
}
.ironsworn.sheet.actor {
  min-width: 630px;
}
.drag-highlight,
.highlighted {
  background-color: var(--ironsworn-color-bg-highlight) !important;
}

.window-content,
.journal-entry .journal-entry-content {
  background: var(--ironsworn-color-bg);
}

// generate color variable mixins for widgets
@states: enabled, hover, selected, active;

.colorState(@state) {
  .colors-@{state}-fill,
  .colors-@{state}-bg {
    stroke: var(--ironsworn-color-widget-stroke- @state);
    border-color: $stroke;
    color: var(--ironsworn-color-widget-text- @state);
  }
  .colors-@{state}-fill {
    fill: var(--ironsworn-color-widget-fill- @state);
  }
  .colors-@{state}-bg {
    background-color: var(--ironsworn-color-widget-fill- @state);
  }
}

@fillTypes: fill, background-color;
// applies a filled appearance to *previous* siblings of the selected element -- creating a continuous bar, wedge, etc.
// use continuous-fill-* when the 'fill' property is needed, like on svgs
// use continuous-background-color-* when the 'background-color' property is needed.

each(@fillTypes, {
.continuous-@{value}-parent {
  pointer-events: none;
  position: relative; // so that the z-index below works
  .continuous-@{value}-segment {
    pointer-events: all;
    transition: var(--transition-general);
    stroke: var(--ironsworn-color-widget-stroke-selected);
    border-color: $stroke;
    @{value}: var(--ironsworn-color-widget-fill-selected);
    color: var(--ironsworn-color-widget-text-selected);

  }
  .continuous-@{value}-segment {
    z-index: 1;
    &:hover, &[aria-selected=true], &.selected {
      z-index: 100;
    }
  }


  &:not(:hover) {
    .continuous-@{value}-segment {
      &[aria-selected='true'] {
        ~ .continuous-@{value}-segment {
          // ðŸ‘† this is what does the work:  ~ , the subsequent sibling selector. there s no previous sibling selector, hence the fill being subtractive.
          @{value}: var(--ironsworn-color-widget-fill-enabled);
          stroke: var(--ironsworn-color-widget-stroke-enabled);
          border-color: $stroke;
          color: var(--ironsworn-color-widget-text-enabled);
        }
      }
    }
  }
  &[aria-valuenow='0'] {
    // ensures the correct fill when there s no selected segment
    &:not(:hover) {
      .continuous-@{value}-segment {
        @{value}: var(--ironsworn-color-widget-fill-enabled);
        stroke: var(--ironsworn-color-widget-stroke-enabled);
        border-color: $stroke;
        color: var(--ironsworn-color-widget-text-enabled);
      }
    }
  }
  &:hover {
    .continuous-@{value}-segment {
      // same principle as without a hover: everything gets the hover style, and it s removed from everything after the selected item
      stroke: var(--ironsworn-color-widget-stroke-hover);
      border-color: $stroke;
      @{value}: var(--ironsworn-color-widget-fill-hover);
      color: var(--ironsworn-color-widget-text-hover);
      &:hover {
        // so that a highlighted border isn t hidden when segment borders overlap
        ~ .continuous-@{value}-segment {
          @{value}: var(--ironsworn-color-widget-fill-enabled);
          color: var(--ironsworn-color-widget-text-enabled);
          stroke: var(--ironsworn-color-widget-stroke-enabled);
          border-color: $stroke;
        }
      }
    }
  }
}

});
