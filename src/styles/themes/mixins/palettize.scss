/**
 * LESS mixin that interpolates CSS variables for a palette of colours.
 * Currently it doesn't check contrast, but it probably should.
* NOTE: 'warm' and 'cool' are used here primarily because they're more memorable labels than 'primary' or 'secondary'. They *could* be 'warmer'/'cooler' colours, but they don't have to be; 'warm'/'cool' are more about a UX element's importance/activity (warmer = more active/dramatic).
 * $prefix - the prefix to use for the generated CSS variables.
 * $fgColor - The foreground color.
 * $bgColor - The background color.
 * $warmColor - A saturated accent/highlight color, used both as-is and in mixtures with the other colours.
 * $coolColor - A second saturated accent/highlight color, used both as-is and in mixtures with the other colours.
 */
@mixin palettize($prefix:palette, $fgColor:hsl(0, 0%, 0%),$bgColor:hsl(0, 0%, 100%),$warmColor:hsl(24, 100%, 50%), $coolColor:hsl(0, 100%, 50%)){
  // TODO: This could probably be improved significantly by writing palettize in JS to take advantage of chroma.js, then importing it as a LESS plugin. The various scale functions are particularly attractive!
  $lightColor: if((luma($fgColor) > luma($bgColor)), $fgColor, $bgColor);
  $darkColor: if((luma($fgColor) < luma($bgColor)), $fgColor, $bgColor);

  $lightWarmBase: mix($warmColor, $lightColor, 75%);
  $lightCoolBase: mix($coolColor, $lightColor, 75%);
  $darkWarmBase: mix($warmColor, $darkColor, 75%);
  $darkCoolBase: mix($coolColor, $darkColor, 75%);

  $lightnessCeiling: 75%;
  $lightnessFloor: 20%;

  $lightWarm: hsl(hue($lightWarmBase), 100%, $lightnessCeiling);
  $lightCool: hsl(hue($lightCoolBase), 100%, $lightnessCeiling);
  $darkWarm: hsl(hue($darkWarmBase), 100%, $lightnessFloor);
  $darkCool: hsl(hue($darkCoolBase), 100%, $lightnessFloor);

  $fgWarm: if((luma($fgColor) > luma($bgColor)), $lightWarm, $darkWarm);
  $fgCool: if((luma($fgColor) > luma($bgColor)), $lightCool, $darkCool);
  $bgWarm: if((luma($fgColor) < luma($bgColor)), $lightWarm, $darkWarm);
  $bgCool: if((luma($fgColor) < luma($bgColor)), $lightCool, $darkCool);

  // Now that all the LESS variables are set, start writing the CSS variables.

  --#{$prefix}-warm: $warmColor;
  --#{$prefix}-cool: $coolColor;
  --#{$prefix}-light: $lightColor;
  --#{$prefix}-light-cool: $lightCool;
  --#{$prefix}-light-warm: $lightWarm;
  --#{$prefix}-dark: $darkColor;
  --#{$prefix}-dark-cool: $darkCool;
  --#{$prefix}-dark-warm: $darkWarm;

  --#{$prefix}-fg: $fgColor;
  --#{$prefix}-bg: $bgColor;
  --#{$prefix}-fg-warm: $fgWarm;
  --#{$prefix}-fg-cool: $fgCool;
  --#{$prefix}-bg-warm: $bgWarm;
  --#{$prefix}-bg-cool: $bgCool;

  // transparent overlays
  @include mixOverlays($prefix, warm, $warmColor);
  @include mixOverlays($prefix, cool, $coolColor);
  @include mixOverlays($prefix, light, $lightColor);
  @include mixOverlays($prefix, light-cool, $lightCool);
  @include mixOverlays($prefix, light-warm, $lightWarm);
  @include mixOverlays($prefix, dark, $darkColor);
  @include mixOverlays($prefix, dark-cool, $darkCool);
  @include mixOverlays($prefix, dark-warm, $darkWarm);
  @include mixOverlays($prefix, fg, $fgColor);
  @include mixOverlays($prefix, fg-cool, $fgCool);
  @include mixOverlays($prefix, fg-warm, $fgWarm);
  @include mixOverlays($prefix, bg, $bgColor);
  @include mixOverlays($prefix, bg-cool, $bgCool);
  @include mixOverlays($prefix, bg-warm, $bgWarm);

  // *-midtone-* variables describe a color scale from $fgColor to $bgColor, where *-midtone-90 is 90% $fgColor, and *-midtone-10 is 10% $fgColor.
  @include mixScale($prefix, midtone, $bgColor, $fgColor);

  // *-scale-* variables describe a color scale from $lightColor to $darkColor, where *-scale-90 is 90% $lightColor, and *-scale-10 is 10% $lightColor.
  @include mixScale($prefix, scale, $darkColor, $lightColor);

  // Set sensible defaults for semantically-oriented colors

  --#{$prefix}-fg-muted: var(e(undefined
  --#{$prefix}-fg-highlight: var(e(undefined

  // INPUT
  --#{$prefix}-input-bg: var(e(undefined
  --#{$prefix}-input-border: var(e(undefined

  // CLICKABLE TEXT
  --#{$prefix}-clickable-text: inherit;
  --#{$prefix}-clickable-text-hover: var(e(undefined
  --#{$prefix}-clickable-text-selected: var(e(undefined

  // WIDGETS
  --#{$prefix}-widget-fill: var(e(undefined
}

// HELPER MIXINS
@mixin mixOverlays($prefix,$infix,$baseColor){
  $overlays: range(10, 90, 10);
  each($overlays, {
    --#{$prefix}-#{$infix}-#{$value}: rgba($baseColor, $value);
  });
}
@mixin mixScale($prefix,$infix,$baseColor,$addedColor){
  $mixtures: range(10, 90, 10);
  each($mixtures, {
    --#{$prefix}-#{$infix}-#{$value}: mix($addedColor, $baseColor, $value);
  });
}
