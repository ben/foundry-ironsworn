@use 'sass:color';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:map';
@use 'sass:string';

@mixin palettize(
  $fg-color,
  $bg-color,
  $warm-color,
  $cool-color,
  $prefix: palette
) {
  // generate a large set of colour values from the four anchor colours.

  $palette: gamutize($fg-color, $bg-color, $warm-color, $cool-color, $prefix);

  // Start writing the CSS custom properties.
  // see: https://developer.mozilla.org/en-US/docs/Web/CSS/--*
  @each $css-property, $color in $palette {
    --#{$css-property}: #{$color};
  }
}

@mixin light-theme($prefix) {
  @include color-defaults('dark', 'light', $prefix);
}

@mixin dark-theme($prefix) {
  @include color-defaults('light', 'dark', $prefix);
}

// Set sensible defaults for semantically-oriented colors
@mixin color-defaults($fg-type, $bg-type, $prefix) {
  --#{$prefix}-fg-muted: var(--#{$prefix}-midtone-60);
  --#{$prefix}-fg-highlight: var(--#{$prefix}-#{$fg-type}-warm);

  // INPUT
  --#{$prefix}-input-bg: var(--#{$prefix}-#{$fg-type}-10);
  --#{$prefix}-input-border: var(--#{$prefix}-#{$fg-type}-10);

  // CLICKABLE TEXT
  --#{$prefix}-clickable-text: inherit;
  --#{$prefix}-clickable-text-hover: var(--#{$prefix}-#{$fg-type}-warm);
  --#{$prefix}-clickable-text-selected: var(--#{$prefix}-#{$fg-type}-warm);

  // WIDGETS
  --#{$prefix}-widget-fill: var(--#{$prefix}-#{$fg-type}-80);
}

// generates color variables to style an interactive element with an invert effect when it's active
@mixin interactive-invert($element-prefix, $source-prefix) {
  --#{$element-prefix}-fg: var(--#{$source-prefix}-fg);
  --#{$element-prefix}-bg: transparent;
  --#{$element-prefix}-border: var(--#{$source-prefix}-border);
  --#{$element-prefix}-fg-hover: var(--#{$source-prefix}-fg);
  --#{$element-prefix}-bg-hover: var(--#{$source-prefix}-fg-20);
  --#{$element-prefix}-border-hover: var(--#{$source-prefix}-border);
  --#{$element-prefix}-fg-selected: var(--#{$source-prefix}-bg);
  --#{$element-prefix}-bg-selected: var(--#{$source-prefix}-fg);
  --#{$element-prefix}-border-selected: var(--#{$source-prefix}-fg);
}

// generates color variables to style an interactive element with slightly dulled colours in its default state, and a tint effect when it's active.
@mixin interactive-tint($element-prefix, $source-prefix) {
  --#{$element-prefix}-fg: var(--#{$source-prefix}-midtone-80);
  --#{$element-prefix}-bg: transparent;
  --#{$element-prefix}-border: var(--#{$source-prefix}-midtone-80);
  --#{$element-prefix}-fg-hover: var(--#{$source-prefix}-fg-warm);
  --#{$element-prefix}-bg-hover: var(--#{$source-prefix}-fg-30);
  --#{$element-prefix}-border-hover: var(--#{$source-prefix}-fg);
  --#{$element-prefix}-fg-selected: var(--#{$source-prefix}-fg-warm);
  --#{$element-prefix}-bg-selected: var(--#{$source-prefix}-fg-50);
  --#{$element-prefix}-border-selected: var(--#{$source-prefix}-fg-warm);
}

@mixin soft-border($prefix) {
  --#{$prefix}-border-highlight: var(--#{$prefix}-fg-warm);
  --#{$prefix}-border: var(--#{$prefix}-fg-80);
  --#{$prefix}-border-muted: var(--#{$prefix}-fg-30);
}

@mixin sharp-border($prefix) {
  --#{$prefix}-border-highlight: var(--#{$prefix}-fg-warm);
  --#{$prefix}-border: var(--#{$prefix}-fg);
  --#{$prefix}-border-muted: var(--#{$prefix}-fg-80);
}

// Sets
@mixin normalized-ironsworn-colors(
  $bg-color: #fff,
  $intensity: 0.65,
  $contrast-ratio: 4.5
) {
  // contrast ratio is the desired ratio of background luminance to foreground luminance.
  // broadly speaking: 3 is OK on big elements, 4.5 for body text.

  // these colors were eyedroppered directly from the Starforged PDF, but we need to adjust them for web use
  $pdf-colors: (
    'red': #c9181a,
    'purple': #8c1d81,
    'blue': #35a9e0,
  );

  // These colours are interpolated in the OKLCH colourspace.
  // Chroma in OKLCH is theoretically unbounded, but for web design purposes 0.4 is the practical maximum.
  $chroma-max: 0.4;
  $chroma: $chroma-max * $intensity;

  $bg-luminance: luminance($bg-color);

  @debug bg-luminance meta.inspect($bg-luminance);

  $luminance-max: 1;
  $luminance-min: 0;

  @if $bg-luminance < 0.5 {
    // dark theme
    $luminance-min: $bg-luminance * $contrast-ratio;
  } @else {
    // light theme
    $luminance-max: math.div($bg-luminance, $contrast-ratio);
  }

  @each $key, $color in $pdf-colors {
    $luminance-old: luminance($color);
    @debug luminance-min meta.inspect($luminance-min);
    @debug luminance-old meta.inspect($luminance-old);
    @debug luminance-max meta.inspect($luminance-max);

    $luminance-new: math.clamp($luminance-min, $luminance-old, $luminance-max);

    // set luminance first, colours can be a bit muddy otherwise
    $normalize-lum: luminance($color, $luminance-new, 'oklch');
    $new-color: set-channel($normalize-lum, 'oklch.c', $chroma);
    // $new-color: $normalize-lum;

    @debug new-color meta.inspect($new-color);
    @debug adjusted L meta.inspect(get-channel($new-color, 'oklch.l'));
    @debug adjusted C meta.inspect(get-channel($new-color, 'oklch.c'));
    @debug adjusted H meta.inspect(get-channel($new-color, 'oklch.h'));
    @debug adjusted luminance meta.inspect(luminance($new-color));

    --ironsworn-color-#{$key}: #{$new-color};
  }

  // set dependent variables
  --ironsworn-color-legacy-quests: var(--ironsworn-color-red);
  --ironsworn-color-legacy-bonds: var(--ironsworn-color-purple);
  --ironsworn-color-legacy-discoveries: var(--ironsworn-color-blue);
  --ironsworn-color-danger: var(--ironsworn-color-red);
  --ironsworn-color-success: var(--ironsworn-color-blue);
  --ironsworn-color-warning: hsl(55deg 100% 50%);
}

// HELPER FUNCTIONS

// Infers whether this is a light or dark theme.

@function theme-type($fg-color, $bg-color) {
  @if luminance($bg-color) < luminance($fg-color) {
    @return (bg: 'dark', fg: 'light');
  } @else {
    @return (bg: 'light', fg: 'dark');
  }
}
